% Первая часть задания - предикаты работы со списками

% Длина списка : 
my_length([_|L],X):-
my_length(L,A),
X is A + 1.
my_length([],0).
% Принадлежность к списку:

my_member(X,[X|_]).
my_member(X,[_|L]):-
my_member(X,L).

% Соединение двух списков:
my_append([H|L],Y,[H|Z]):-
my_append(L,Y,Z).
my_append([],X,X).

% Удаление элемента:
my_remove(X,[X|L],L).
my_remove(X,[H|L],[H|Z]):-
my_remove(X,L,Z).

%Перестановка элементов:
my_permute([], []).
my_permute(P, [H|L]):-
my_remove(H, P, X),
my_permute(X, L).

%Подсписок:
my_sublist(S, L):-
my_append(L1, _, L),
my_append(_, S, L1).

%ПРЕДИКАТ ОБРАБОТКИ СПИСКОВ (ВАРИАНТ 9):
%Получение N-го элемента списка:
%С использованием стандартных предикатов:
get_Num(N,L,X):-
my_append(A,[X|_],L),
my_length(A,N1),
N is N1+1.

%Без стандартных предикатов:
getNum(1,[Y|_],Y).
getNum(N,[_|L],X):-
getNum(N1,L,X),
N is N1+1.

%ПРЕДИКАТ ОБРАБОТКИ ЧИСЛОВЫХ СПИСКОВ (ВАРИАНТ 13):
%Проверка списка на арифметическую прогрессию:

%Проверка прогрессии с неизвестной разностью:
isArifm(L):-
isArifm(L,_).

%Проверка с известной разностью прогрессии:
isArifm([],_).
%список с одним элементом
isArifm([_],_).
%список с несколькими элементами
%для сравнения необходимо хотя бы два элемента
isArifm([A,B|T],D):-
D is B-A,
isArifm([B|T],D).

%Совместное использование:
%Извлечение подсписка, если его элементы являются арифметической прогрессией:
get_Arifm_sublist(S,L):-
my_sublist(S, L),
isArifm(S).
